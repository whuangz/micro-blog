// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/blogs.proto

package blogs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Blogs service

type BlogsService interface {
	FetchArticles(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	GetArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error)
	CreateArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error)
	DeleteArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error)
	UpdateArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error)
	FetchTopics(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	CreateTopic(ctx context.Context, in *Topic, opts ...client.CallOption) (*Response, error)
	GetTopic(ctx context.Context, in *Topic, opts ...client.CallOption) (*Response, error)
}

type blogsService struct {
	c    client.Client
	name string
}

func NewBlogsService(name string, c client.Client) BlogsService {
	return &blogsService{
		c:    c,
		name: name,
	}
}

func (c *blogsService) FetchArticles(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Blogs.FetchArticles", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsService) GetArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Blogs.GetArticle", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsService) CreateArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Blogs.CreateArticle", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsService) DeleteArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Blogs.DeleteArticle", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsService) UpdateArticle(ctx context.Context, in *Article, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Blogs.UpdateArticle", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsService) FetchTopics(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Blogs.FetchTopics", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsService) CreateTopic(ctx context.Context, in *Topic, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Blogs.CreateTopic", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsService) GetTopic(ctx context.Context, in *Topic, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Blogs.GetTopic", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Blogs service

type BlogsHandler interface {
	FetchArticles(context.Context, *ListRequest, *ListResponse) error
	GetArticle(context.Context, *Article, *Response) error
	CreateArticle(context.Context, *Article, *Response) error
	DeleteArticle(context.Context, *Article, *Response) error
	UpdateArticle(context.Context, *Article, *Response) error
	FetchTopics(context.Context, *ListRequest, *ListResponse) error
	CreateTopic(context.Context, *Topic, *Response) error
	GetTopic(context.Context, *Topic, *Response) error
}

func RegisterBlogsHandler(s server.Server, hdlr BlogsHandler, opts ...server.HandlerOption) error {
	type blogs interface {
		FetchArticles(ctx context.Context, in *ListRequest, out *ListResponse) error
		GetArticle(ctx context.Context, in *Article, out *Response) error
		CreateArticle(ctx context.Context, in *Article, out *Response) error
		DeleteArticle(ctx context.Context, in *Article, out *Response) error
		UpdateArticle(ctx context.Context, in *Article, out *Response) error
		FetchTopics(ctx context.Context, in *ListRequest, out *ListResponse) error
		CreateTopic(ctx context.Context, in *Topic, out *Response) error
		GetTopic(ctx context.Context, in *Topic, out *Response) error
	}
	type Blogs struct {
		blogs
	}
	h := &blogsHandler{hdlr}
	return s.Handle(s.NewHandler(&Blogs{h}, opts...))
}

type blogsHandler struct {
	BlogsHandler
}

func (h *blogsHandler) FetchArticles(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.BlogsHandler.FetchArticles(ctx, in, out)
}

func (h *blogsHandler) GetArticle(ctx context.Context, in *Article, out *Response) error {
	return h.BlogsHandler.GetArticle(ctx, in, out)
}

func (h *blogsHandler) CreateArticle(ctx context.Context, in *Article, out *Response) error {
	return h.BlogsHandler.CreateArticle(ctx, in, out)
}

func (h *blogsHandler) DeleteArticle(ctx context.Context, in *Article, out *Response) error {
	return h.BlogsHandler.DeleteArticle(ctx, in, out)
}

func (h *blogsHandler) UpdateArticle(ctx context.Context, in *Article, out *Response) error {
	return h.BlogsHandler.UpdateArticle(ctx, in, out)
}

func (h *blogsHandler) FetchTopics(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.BlogsHandler.FetchTopics(ctx, in, out)
}

func (h *blogsHandler) CreateTopic(ctx context.Context, in *Topic, out *Response) error {
	return h.BlogsHandler.CreateTopic(ctx, in, out)
}

func (h *blogsHandler) GetTopic(ctx context.Context, in *Topic, out *Response) error {
	return h.BlogsHandler.GetTopic(ctx, in, out)
}
