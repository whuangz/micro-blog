// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/article/article.proto

package article

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ArticleService service

type ArticleService interface {
	FetchArticles(ctx context.Context, in *ListArticleRequest, opts ...client.CallOption) (*Result, error)
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...client.CallOption) (*Result, error)
	DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...client.CallOption) (*Result, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...client.CallOption) (*Result, error)
}

type articleService struct {
	c    client.Client
	name string
}

func NewArticleService(name string, c client.Client) ArticleService {
	return &articleService{
		c:    c,
		name: name,
	}
}

func (c *articleService) FetchArticles(ctx context.Context, in *ListArticleRequest, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "ArticleService.FetchArticles", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "ArticleService.CreateArticle", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "ArticleService.DeleteArticle", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleService) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...client.CallOption) (*Result, error) {
	req := c.c.NewRequest(c.name, "ArticleService.UpdateArticle", in)
	out := new(Result)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArticleService service

type ArticleServiceHandler interface {
	FetchArticles(context.Context, *ListArticleRequest, *Result) error
	CreateArticle(context.Context, *CreateArticleRequest, *Result) error
	DeleteArticle(context.Context, *DeleteArticleRequest, *Result) error
	UpdateArticle(context.Context, *UpdateArticleRequest, *Result) error
}

func RegisterArticleServiceHandler(s server.Server, hdlr ArticleServiceHandler, opts ...server.HandlerOption) error {
	type articleService interface {
		FetchArticles(ctx context.Context, in *ListArticleRequest, out *Result) error
		CreateArticle(ctx context.Context, in *CreateArticleRequest, out *Result) error
		DeleteArticle(ctx context.Context, in *DeleteArticleRequest, out *Result) error
		UpdateArticle(ctx context.Context, in *UpdateArticleRequest, out *Result) error
	}
	type ArticleService struct {
		articleService
	}
	h := &articleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ArticleService{h}, opts...))
}

type articleServiceHandler struct {
	ArticleServiceHandler
}

func (h *articleServiceHandler) FetchArticles(ctx context.Context, in *ListArticleRequest, out *Result) error {
	return h.ArticleServiceHandler.FetchArticles(ctx, in, out)
}

func (h *articleServiceHandler) CreateArticle(ctx context.Context, in *CreateArticleRequest, out *Result) error {
	return h.ArticleServiceHandler.CreateArticle(ctx, in, out)
}

func (h *articleServiceHandler) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, out *Result) error {
	return h.ArticleServiceHandler.DeleteArticle(ctx, in, out)
}

func (h *articleServiceHandler) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, out *Result) error {
	return h.ArticleServiceHandler.UpdateArticle(ctx, in, out)
}
